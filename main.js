(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function r(t){e(1,arguments);var r=Object.prototype.toString.call(t);return t instanceof Date||"object"===n(t)&&"[object Date]"===r?new Date(t.getTime()):"number"==typeof t||"[object Number]"===r?new Date(t):("string"!=typeof t&&"[object String]"!==r||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function a(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}var o=864e5;function i(t){e(1,arguments);var n=r(t),a=n.getUTCDay(),o=(a<1?7:0)+a-1;return n.setUTCDate(n.getUTCDate()-o),n.setUTCHours(0,0,0,0),n}function u(t){e(1,arguments);var n=r(t),a=n.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(a+1,0,4),o.setUTCHours(0,0,0,0);var u=i(o),s=new Date(0);s.setUTCFullYear(a,0,4),s.setUTCHours(0,0,0,0);var l=i(s);return n.getTime()>=u.getTime()?a+1:n.getTime()>=l.getTime()?a:a-1}var s=6048e5;var l={};function d(){return l}function c(t,n){var o,i,u,s,l,c,m,h;e(1,arguments);var f=d(),g=a(null!==(o=null!==(i=null!==(u=null!==(s=null==n?void 0:n.weekStartsOn)&&void 0!==s?s:null==n||null===(l=n.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==u?u:f.weekStartsOn)&&void 0!==i?i:null===(m=f.locale)||void 0===m||null===(h=m.options)||void 0===h?void 0:h.weekStartsOn)&&void 0!==o?o:0);if(!(g>=0&&g<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var v=r(t),y=v.getUTCDay(),p=(y<g?7:0)+y-g;return v.setUTCDate(v.getUTCDate()-p),v.setUTCHours(0,0,0,0),v}function m(t,n){var o,i,u,s,l,m,h,f;e(1,arguments);var g=r(t),v=g.getUTCFullYear(),y=d(),p=a(null!==(o=null!==(i=null!==(u=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(l=n.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==u?u:y.firstWeekContainsDate)&&void 0!==i?i:null===(h=y.locale)||void 0===h||null===(f=h.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==o?o:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var w=new Date(0);w.setUTCFullYear(v+1,0,p),w.setUTCHours(0,0,0,0);var b=c(w,n),k=new Date(0);k.setUTCFullYear(v,0,p),k.setUTCHours(0,0,0,0);var T=c(k,n);return g.getTime()>=b.getTime()?v+1:g.getTime()>=T.getTime()?v:v-1}var h=6048e5;function f(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const g=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return f("yy"===t?r%100:r,t.length)},v=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):f(n+1,2)},y=function(e,t){return f(e.getUTCDate(),t.length)},p=function(e,t){return f(e.getUTCHours()%12||12,t.length)},w=function(e,t){return f(e.getUTCHours(),t.length)},b=function(e,t){return f(e.getUTCMinutes(),t.length)},k=function(e,t){return f(e.getUTCSeconds(),t.length)},T=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return f(Math.floor(r*Math.pow(10,n-3)),t.length)};var S={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return g(e,t)},Y:function(e,t,n,r){var a=m(e,r),o=a>0?a:1-a;return"YY"===t?f(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):f(o,t.length)},R:function(e,t){return f(u(e),t.length)},u:function(e,t){return f(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return f(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return f(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return v(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return f(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,n,o,i){var u=function(t,n){e(1,arguments);var o=r(t),i=c(o,n).getTime()-function(t,n){var r,o,i,u,s,l,h,f;e(1,arguments);var g=d(),v=a(null!==(r=null!==(o=null!==(i=null!==(u=null==n?void 0:n.firstWeekContainsDate)&&void 0!==u?u:null==n||null===(s=n.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==i?i:g.firstWeekContainsDate)&&void 0!==o?o:null===(h=g.locale)||void 0===h||null===(f=h.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==r?r:1),y=m(t,n),p=new Date(0);return p.setUTCFullYear(y,0,v),p.setUTCHours(0,0,0,0),c(p,n)}(o,n).getTime();return Math.round(i/h)+1}(t,i);return"wo"===n?o.ordinalNumber(u,{unit:"week"}):f(u,n.length)},I:function(t,n,a){var o=function(t){e(1,arguments);var n=r(t),a=i(n).getTime()-function(t){e(1,arguments);var n=u(t),r=new Date(0);return r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0),i(r)}(n).getTime();return Math.round(a/s)+1}(t);return"Io"===n?a.ordinalNumber(o,{unit:"week"}):f(o,n.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):y(e,t)},D:function(t,n,a){var i=function(t){e(1,arguments);var n=r(t),a=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var i=a-n.getTime();return Math.floor(i/o)+1}(t);return"Do"===n?a.ordinalNumber(i,{unit:"dayOfYear"}):f(i,n.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return f(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return f(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return f(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return p(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):w(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):f(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):f(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):b(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):k(e,t)},S:function(e,t){return T(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return x(a);case"XXXX":case"XX":return E(a);default:return E(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return x(a);case"xxxx":case"xx":return E(a);default:return E(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+C(a,":");default:return"GMT"+E(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+C(a,":");default:return"GMT"+E(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return f(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return f((r._originalDate||e).getTime(),t.length)}};function C(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+f(o,2)}function x(e,t){return e%60==0?(e>0?"-":"+")+f(Math.abs(e)/60,2):E(e,t)}function E(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+f(Math.floor(a/60),2)+n+f(a%60,2)}const D=S;var M=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},q=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},N={p:q,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return M(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",M(a,t)).replace("{{time}}",q(o,t))}};const U=N;var P=["D","DD"],L=["YY","YYYY"];function j(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var W={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Y(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}var A,O={date:Y({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Y({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Y({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},F={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function H(e){return function(t,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,o=null!=n&&n.width?String(n.width):a;r=e.formattingValues[o]||e.formattingValues[a]}else{var i=e.defaultWidth,u=null!=n&&n.width?String(n.width):e.defaultWidth;r=e.values[u]||e.values[i]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function z(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,u=o[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],l=Array.isArray(s)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(u))return n}(s):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(u))return n}(s);return i=e.valueCallback?e.valueCallback(l):l,{value:i=n.valueCallback?n.valueCallback(i):i,rest:t.slice(u.length)}}}const G={code:"en-US",formatDistance:function(e,t,n){var r,a=W[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:O,formatRelative:function(e,t,n,r){return F[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:H({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:H({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:H({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:H({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:H({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(A={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(A.matchPattern);if(!n)return null;var r=n[0],a=e.match(A.parsePattern);if(!a)return null;var o=A.valueCallback?A.valueCallback(a[0]):a[0];return{value:o=t.valueCallback?t.valueCallback(o):o,rest:e.slice(r.length)}}),era:z({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:z({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:z({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:z({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:z({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var Q=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,R=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,X=/^'([^]*?)'?$/,B=/''/g,I=/[a-zA-Z]/;function $(n,o,i){var u,s,l,c,m,h,f,g,v,y,p,w,b,k,T,S,C,x;e(2,arguments);var E=String(o),M=d(),q=null!==(u=null!==(s=null==i?void 0:i.locale)&&void 0!==s?s:M.locale)&&void 0!==u?u:G,N=a(null!==(l=null!==(c=null!==(m=null!==(h=null==i?void 0:i.firstWeekContainsDate)&&void 0!==h?h:null==i||null===(f=i.locale)||void 0===f||null===(g=f.options)||void 0===g?void 0:g.firstWeekContainsDate)&&void 0!==m?m:M.firstWeekContainsDate)&&void 0!==c?c:null===(v=M.locale)||void 0===v||null===(y=v.options)||void 0===y?void 0:y.firstWeekContainsDate)&&void 0!==l?l:1);if(!(N>=1&&N<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var W=a(null!==(p=null!==(w=null!==(b=null!==(k=null==i?void 0:i.weekStartsOn)&&void 0!==k?k:null==i||null===(T=i.locale)||void 0===T||null===(S=T.options)||void 0===S?void 0:S.weekStartsOn)&&void 0!==b?b:M.weekStartsOn)&&void 0!==w?w:null===(C=M.locale)||void 0===C||null===(x=C.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==p?p:0);if(!(W>=0&&W<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!q.localize)throw new RangeError("locale must contain localize property");if(!q.formatLong)throw new RangeError("locale must contain formatLong property");var Y=r(n);if(!function(n){if(e(1,arguments),!function(n){return e(1,arguments),n instanceof Date||"object"===t(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var a=r(n);return!isNaN(Number(a))}(Y))throw new RangeError("Invalid time value");var A=function(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}(Y),O=function(t,n){return e(2,arguments),function(t,n){e(2,arguments);var o=r(t).getTime(),i=a(n);return new Date(o+i)}(t,-a(n))}(Y,A),F={firstWeekContainsDate:N,weekStartsOn:W,locale:q,_originalDate:Y};return E.match(R).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,U[t])(e,q.formatLong):e})).join("").match(Q).map((function(e){if("''"===e)return"'";var t,r,a=e[0];if("'"===a)return(r=(t=e).match(X))?r[1].replace(B,"'"):t;var u,s=D[a];if(s)return null!=i&&i.useAdditionalWeekYearTokens||(u=e,-1===L.indexOf(u))||j(e,o,String(n)),null!=i&&i.useAdditionalDayOfYearTokens||!function(e){return-1!==P.indexOf(e)}(e)||j(e,o,String(n)),s(O,e,q.localize,F);if(a.match(I))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return e})).join("")}Math.pow(10,8);var J=6e4,Z=36e5;function _(t,n){var r;e(1,arguments);var o=a(null!==(r=null==n?void 0:n.additionalDigits)&&void 0!==r?r:2);if(2!==o&&1!==o&&0!==o)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var i,u=function(e){var t,n={},r=e.split(K.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?t=r[0]:(n.date=r[0],t=r[1],K.timeZoneDelimiter.test(n.date)&&(n.date=e.split(K.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var a=K.timezone.exec(t);a?(n.time=t.replace(a[1],""),n.timezone=a[1]):n.time=t}return n}(t);if(u.date){var s=function(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};var a=r[1]?parseInt(r[1]):null,o=r[2]?parseInt(r[2]):null;return{year:null===o?a:100*o,restDateString:e.slice((r[1]||r[2]).length)}}(u.date,o);i=function(e,t){if(null===t)return new Date(NaN);var n=e.match(V);if(!n)return new Date(NaN);var r=!!n[4],a=ne(n[1]),o=ne(n[2])-1,i=ne(n[3]),u=ne(n[4]),s=ne(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,u,s)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(t,u,s):new Date(NaN);var l=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(ae[t]||(oe(e)?29:28))}(t,o,i)&&function(e,t){return t>=1&&t<=(oe(e)?366:365)}(t,a)?(l.setUTCFullYear(t,o,Math.max(a,i)),l):new Date(NaN)}(s.restDateString,s.year)}if(!i||isNaN(i.getTime()))return new Date(NaN);var l,d=i.getTime(),c=0;if(u.time&&(c=function(e){var t=e.match(ee);if(!t)return NaN;var n=re(t[1]),r=re(t[2]),a=re(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,a)?n*Z+r*J+1e3*a:NaN}(u.time),isNaN(c)))return new Date(NaN);if(!u.timezone){var m=new Date(d+c),h=new Date(0);return h.setFullYear(m.getUTCFullYear(),m.getUTCMonth(),m.getUTCDate()),h.setHours(m.getUTCHours(),m.getUTCMinutes(),m.getUTCSeconds(),m.getUTCMilliseconds()),h}return l=function(e){if("Z"===e)return 0;var t=e.match(te);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,a)?n*(r*Z+a*J):NaN}(u.timezone),isNaN(l)?new Date(NaN):new Date(d+c+l)}var K={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},V=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,ee=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,te=/^([+-])(\d{2})(?::?(\d{2}))?$/;function ne(e){return e?parseInt(e):1}function re(e){return e&&parseFloat(e.replace(",","."))||0}var ae=[31,null,31,30,31,30,31,31,30,31,30,31];function oe(e){return e%400==0||e%4==0&&e%100!=0}function ie(t){e(1,arguments);var n=r(t);return n.setHours(0,0,0,0),n}function ue(t){return e(1,arguments),function(t,n){e(2,arguments);var r=ie(t),a=ie(n);return r.getTime()===a.getTime()}(t,Date.now())}function se(t,n){var o,i,u,s,l,c,m,h;e(1,arguments);var f=d(),g=a(null!==(o=null!==(i=null!==(u=null!==(s=null==n?void 0:n.weekStartsOn)&&void 0!==s?s:null==n||null===(l=n.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==u?u:f.weekStartsOn)&&void 0!==i?i:null===(m=f.locale)||void 0===m||null===(h=m.options)||void 0===h?void 0:h.weekStartsOn)&&void 0!==o?o:0);if(!(g>=0&&g<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var v=r(t),y=v.getDay(),p=(y<g?7:0)+y-g;return v.setDate(v.getDate()-p),v.setHours(0,0,0,0),v}function le(t,n){return e(1,arguments),function(t,n,r){e(2,arguments);var a=se(t,r),o=se(n,r);return a.getTime()===o.getTime()}(t,Date.now(),n)}function de(t){return e(1,arguments),function(t,n){e(2,arguments);var a=r(t),o=r(n);return a.getFullYear()===o.getFullYear()&&a.getMonth()===o.getMonth()}(Date.now(),t)}const ce=(e,t,n=null)=>{const r=document.createElement(e);return r.classList.add(t),r.innerText=n,r},me=(e,t)=>{t.forEach((t=>{e.appendChild(t)}))},he=e=>{for(;e.firstChild;)e.removeChild(e.firstChild)},fe=(e,t,n,r,a)=>{const o=ce("div","task"),i=[ce("div","task-priority"),ce("div","task-title-checkbox"),ce("div","task-date"),ce("div","task-edit"),ce("div","task-delete"),ce("div","task-details"),ce("div","task-project")],u=[],s=ce("span","priority-value");s.style.display="none","low"===e&&(i[0].style.backgroundColor="#2A571D",s.innerText=e),"medium"===e&&(i[0].style.backgroundColor="#F7E800",s.innerText=e),"high"===e&&(i[0].style.backgroundColor="#CF0000",s.innerText=e),i[0].appendChild(s);const l=document.createElement("input");var d,c;d=l,c={type:"checkbox",id:"task-title"},Object.keys(c).forEach((e=>{d.setAttribute(e,c[e])}));const m=ce("label","task-title");m.innerText=t,u.push(l),u.push(m),me(i[1],u),i[2].innerText=$(new Date(n),"EEEE, MMM d y");const h=document.createElement("img");h.setAttribute("src","./images/edit-3.svg"),h.setAttribute("alt","edit"),i[3].appendChild(h);const f=document.createElement("img");return f.setAttribute("src","./images/x-square.svg"),f.setAttribute("alt","delete"),i[4].appendChild(f),i[5].style.display="none",i[5].innerText=r,me(o,i),i[6].style.display="none",i[6].innerText=a,o},ge=()=>{const e=document.querySelector(".task-edit-bg"),t=document.querySelector(".sidebar-list-form");return{openEditForm:t=>{const n=[];e.style.display="flex";const r=t.target.parentElement.parentElement,a=t.target.parentElement.parentElement.childNodes[1].childNodes[1].innerText,o=t.target.parentElement.parentElement.childNodes[5].innerText;let i=t.target.parentElement.parentElement.childNodes[2].innerText;i=Date.parse(i);const u=t.target.parentElement.parentElement.childNodes[6].innerText,s=t.target.parentElement.parentElement.childNodes[0].childNodes[0].innerText;n.push(a,o,i,u,s,r);const l=document.querySelector(".task-title-edit"),d=document.querySelector(".task-text-edit"),c=document.querySelector(".due-date-input-edit"),m=document.querySelector("#project-name-edit"),h=document.querySelector(`#priority-edit-${s}`);return l.value=a,d.value=o,c.value=$(new Date(i),"yyyy-MM-dd"),m.value="undefined"===u?null:u,h.checked=!0,console.log(n),n},deleteTask:(e,t)=>{if(t.includes(e.target.parentElement.parentElement)){document.querySelector(".main-tasks").removeChild(e.target.parentElement.parentElement);const n=t.indexOf(e.target.parentElement.parentElement);t.splice(n,1)}},navigateForm:()=>{t.addEventListener("click",(e=>{"To-do"===e.target.textContent&&(document.querySelector(".note-form").style="transform: scale(1); font-weight: 400;",document.querySelector(".new-note-form").style.display="none",document.querySelector(".new-task-form").style.display="flex",document.querySelector(".todo-form").style="transform: scale(1.1); font-weight: 700;"),"Note"===e.target.textContent&&(document.querySelector(".todo-form").style="transform: scale(1); font-weight: 400;",document.querySelector(".new-task-form").style.display="none",document.querySelector(".new-note-form").style.display="flex",document.querySelector(".note-form").style="transform: scale(1.1); font-weight: 700;",document.querySelector(".note-title-form").value="",document.querySelector(".note-text-form").value="")}))},markChecked:e=>{"task-title"===e.target.id&&(e.target.checked&&(e.target.nextSibling.style="text-decoration: line-through;",e.target.parentElement.parentElement.style="opacity: .5;"),e.target.checked||(e.target.nextSibling.style="text-decoration: none;",e.target.parentElement.parentElement.style="opacity: 1;"))}}},ve=e=>{e.sort(((e,t)=>{let n=Date.parse(e.childNodes[2].innerText);n=$(new Date(n),"yyyy-MM-dd"),n=_(n);let r=Date.parse(t.childNodes[2].innerText);return r=$(new Date(r),"yyyy-MM-dd"),r=_(r),n-r}))},ye=e=>{const t=[];for(const n in e){const r=[e[n].childNodes[6].innerText,e[n]];t.push(r)}return t},pe=e=>{const t=[],n=[],r=[],a=[];for(const t in e){let o=Date.parse(e[t].childNodes[2].innerText);o=$(new Date(o),"yyyy-MM-dd"),o=_(o),ue(o)&&n.push(e[t]),le(o)&&r.push(e[t]),de(o)&&a.push(e[t])}return t.push(n,r,a),document.querySelector(".home-counter").innerText=e.length,document.querySelector(".today-counter").innerText=t[0].length,document.querySelector(".week-counter").innerText=t[1].length,document.querySelector(".month-counter").innerText=t[2].length,t},we=e=>{let t;switch(e.target.className){case"task":t=e.target;break;case"task-title":t=e.target.parentElement.parentElement;break;case"task-title-checkbox":t=e.target.parentElement}return[t.childNodes[1].childNodes[1].innerText,t.childNodes[5].innerText,t.childNodes[2].innerText,t.childNodes[6].innerText,t.childNodes[0].childNodes[0].innerText]},be=e=>{let t="";return e.forEach((e=>{const n=e.outerHTML;t+=n})),localStorage.setItem("tasks",t),t},ke=(e,t,n=null)=>{const r=document.createElement(e);return r.classList.add(t),r.innerText=n,r},Te=(e,t)=>{t.forEach((t=>{e.appendChild(t)}))},Se=(e,t)=>{const n=ke("div","note"),r=[ke("img","delete-note"),ke("textarea","note-title"),ke("textarea","note-text")];return r[1].setAttribute("rows","1"),r[1].setAttribute("cols","16"),r[1].innerText=e,r[2].setAttribute("rows","10"),r[2].setAttribute("cols","20"),r[2].innerText=t,r[0].setAttribute("src","./images/x.svg"),r[0].setAttribute("alt","delete-note"),Te(n,r),n};console.log("hello");const Ce=document.querySelector(".main-tasks"),xe=(e,t)=>{t.forEach((t=>{e.appendChild(t)}))},Ee=e=>{for(;e.firstChild;)e.removeChild(e.firstChild)},De=[fe("medium","buy new shoes","2023-04-29","buy shoes for workout","Gym"),fe("low","buy, a cake","2023-04-25","go to Fika for the birthday cake"),fe("high","job interview","2023-04-30","work on soft skills prior to the interview","Study"),fe("low","go to gym","2023-06-01","do squats and push-ups","Gym")],Me=[Se("Movies to watch","Four rooms, Silverado, Inception"),Se("Places to visit","Tokyo, Kyoto, Osaka")];let qe=[],Ne=[];Ne=[...Me],ve(De),pe(De),0===localStorage.length?(qe=[...De],be(qe),xe(Ce,De),pe(qe)):(Ce.innerHTML=localStorage.getItem("tasks"),qe=[...Ce.childNodes],pe(qe));const Ue=$(new Date,"EEEE, MMM d y");document.querySelector(".today-date").innerText=Ue,document.querySelector(".plus-btn").addEventListener("click",(()=>{document.querySelector(".task-title-form").value="",document.querySelector("#priority-low").checked=!0,document.querySelector(".due-date-input").value="",document.querySelector(".task-text-form").value="",document.querySelector("#project-check").checked=!1,document.querySelector("#project-name").disabled=!0,document.querySelector("#project-name").value="",document.querySelector(".note-title-form").value="",document.querySelector(".note-text-form").value="",document.querySelector(".bg-form").style.display="flex",document.querySelector(".todo-form").style="transform: scale(1.1); font-weight: 700;"}));const Pe=document.querySelector(".bg-form");let Le;Pe.addEventListener("click",(e=>{"bg-form"!==e.target.className&&"close-form"!==e.target.className||(Pe.style.display="none",document.querySelector(".task-edit-bg").style.display="none")})),ge().navigateForm(),document.querySelector(".submit-task-btn").addEventListener("click",(()=>{qe.push((()=>{const e=ce("div","task"),t=[ce("div","task-priority"),ce("div","task-title-checkbox"),ce("div","task-date"),ce("div","task-edit"),ce("div","task-delete"),ce("div","task-details"),ce("div","task-project")],n=[],r=ce("span","priority-value");let a;r.style.display="none",document.querySelectorAll(".priority-input").forEach((e=>{e.checked&&(a=e.value)})),"low"===a&&(t[0].style.backgroundColor="#2A571D",r.innerText=a),"medium"===a&&(t[0].style.backgroundColor="#F7E800",r.innerText=a),"high"===a&&(t[0].style.backgroundColor="#CF0000",r.innerText=a),t[0].appendChild(r);const o=document.createElement("input");o.setAttribute("type","checkbox"),o.setAttribute("id","task-title");const i=ce("label","task-title"),u=document.querySelector(".task-title-form").value;i.innerText=u,n.push(o),n.push(i),me(t[1],n);const s=document.querySelector(".due-date-input").value;t[2].innerText=$(""===s?new Date:new Date(s),"EEEE, MMM d y");const l=document.createElement("img");l.setAttribute("src","./images/edit-3.svg"),l.setAttribute("alt","edit"),t[3].appendChild(l);const d=document.createElement("img");d.setAttribute("src","./images/x-square.svg"),d.setAttribute("alt","delete"),t[4].appendChild(d),t[5].style.display="none";const c=document.querySelector(".task-text-form").value;t[5].innerText=c,t[6].style.display="none";const m=document.querySelector("#project-name");t[6].innerText=m.value;const h=[];if(document.querySelectorAll(".project-item-link").forEach((e=>{h.push(e.innerText)})),!h.includes(m.value)){const e=ce("li","project-item"),t=ce("a","project-item-link",m.value);t.setAttribute("href","#"),e.appendChild(t),document.querySelector(".sidebar-projects").appendChild(e)}return me(e,t),e})()),ve(qe),pe(qe),xe(Ce,qe),be(qe),Pe.style.display="none"})),Ce.addEventListener("click",(e=>{console.log(e.target),"task"!==e.target.className&&"task-title"!==e.target.className&&"task-title-checkbox"!==e.target.className||(console.log(we(e)),(e=>{const t=document.querySelector("body"),n=ce("div","task-sum-bg"),r=ce("div","sum-card"),a=[],o=ce("div","sum-card-close","+"),i=ce("div","sum-card-title",e[0]),u=ce("div","sum-card-text",e[1]),s=ce("div","sum-card-date-proj"),l=ce("div","sum-card-date",e[2]);let d;d="undefined"===e[3]?ce("div","sum-card-project"):ce("div","sum-card-project",e[3]),s.appendChild(l),s.appendChild(d);const c=ce("div","sum-card-prio-btn"),m=e[4].charAt(0).toUpperCase()+e[4].substring(1),h=ce("div","sum-card-priority",`Status: ${m}`),f=ce("div","sum-card-btn","Ok");c.appendChild(h),c.appendChild(f),a.push(o,i,u,s,c),me(r,a),n.appendChild(r),"task-sum-bg"===t.lastChild.className?(t.removeChild(t.lastChild),t.appendChild(n)):t.appendChild(n)})(we(e)),document.querySelector(".task-sum-bg").style.display="flex",(()=>{const e=document.querySelector(".task-sum-bg"),t=document.querySelector(".sum-card-btn");e.addEventListener("click",(t=>{"task-sum-bg"!==t.target.className&&"sum-card-close"!==t.target.className||(e.style.display="none")})),t.addEventListener("click",(()=>{e.style.display="none"}))})()),"edit"===e.target.alt&&(Le=ge().openEditForm(e),console.log(Le)),"delete"===e.target.alt&&(ge().deleteTask(e,qe),pe(qe),(e=>{const t=document.querySelectorAll(".project-item"),n=document.querySelector(".sidebar-projects"),r=[],a=[];t.forEach((e=>{r.push(e)})),ye(e).forEach((e=>{a.push(e[0])})),r.forEach((e=>{a.includes(e.childNodes[0].innerText)||n.removeChild(e)}))})(qe),be(qe)),"task-title"===e.target.id&&ge().markChecked(e)}));const je=document.querySelector(".task-edit-bg");je.addEventListener("click",(e=>{"task-edit-bg"!==e.target.className&&"close-edit"!==e.target.className||(je.style.display="none")})),document.querySelector(".submit-btn-edit").addEventListener("click",(()=>{let e=Le[0],t=Le[1],n=$(new Date(Le[2]),"EEEE, MMM d y"),r=Le[3],a=Le[4];const o=document.querySelector(".task-title-edit"),i=document.querySelector(".task-text-edit"),u=document.querySelector(".due-date-input-edit"),s=document.querySelector("#project-name-edit");e=o.value,t=i.value,n=$(new Date(u.value),"EEEE, MMM d y"),r=s.value,document.querySelectorAll(".priority-edit").forEach((e=>{e.checked&&(a=e.value)})),Ce.removeChild(Le[5]),qe.splice(0,qe.length),qe=[...Ce.childNodes],qe.push(fe(a,e,n,t,r)),ve(qe),pe(qe),xe(Ce,qe),be(qe),document.querySelector(".task-edit-bg").style.display="none"})),document.querySelector(".sidebar-list").addEventListener("click",(e=>{const t=pe(qe);switch(e.target.classList[1]){case"home-page":"main-notes"===Ce.classList[1]&&Ce.classList.toggle("main-notes"),Ee(Ce),xe(Ce,qe);break;case"today-page":"main-notes"===Ce.classList[1]&&Ce.classList.toggle("main-notes"),Ee(Ce),xe(Ce,t[0]);break;case"week-page":"main-notes"===Ce.classList[1]&&Ce.classList.toggle("main-notes"),Ee(Ce),xe(Ce,t[1]);break;case"month-page":"main-notes"===Ce.classList[1]&&Ce.classList.toggle("main-notes"),Ee(Ce),xe(Ce,t[2]);break;case"notes-page":"main-notes"!==Ce.classList[1]&&Ce.classList.toggle("main-notes"),Ee(Ce),xe(Ce,Ne),document.querySelector(".main-notes").addEventListener("click",(e=>{"delete-note"===e.target.classList[0]&&((e,t)=>{if(t.includes(e.target.parentElement)){document.querySelector(".main-tasks").removeChild(e.target.parentElement);const n=t.indexOf(e.target.parentElement);t.splice(n,1)}})(e,Ne)}))}})),(e=>{const t=document.querySelector("#projects-task"),n=document.querySelector("#project-check"),r=new Set;n.addEventListener("click",(()=>{const a=ye(e),o=[];n.checked?document.querySelector("#project-name").disabled=!1:document.querySelector("#project-name").disabled=!0,a.forEach((e=>{"undefined"!==e[0]&&r.add(e[0])})),r.forEach((e=>{o.push(ce("option","option",e))})),he(t),me(t,o)}))})(qe),(e=>{const t=document.querySelector("#projects-edit"),n=document.querySelector("#project-check-edit"),r=new Set;n.addEventListener("click",(()=>{const a=ye(e),o=[];n.checked?document.querySelector("#project-name-edit").disabled=!1:document.querySelector("#project-name-edit").disabled=!0,a.forEach((e=>{"undefined"!==e[0]&&r.add(e[0])})),r.forEach((e=>{o.push(ce("option","option",e))})),he(t),me(t,o)}))})(qe),document.querySelector(".sidebar-projects").addEventListener("click",(e=>{"main-notes"===Ce.classList[1]&&Ce.classList.toggle("main-notes");const t=ye(qe),n=[];t.forEach((t=>{t[0]===e.target.innerText&&(n.push(t[1]),Ee(Ce))})),xe(Ce,n)})),document.querySelector(".submit-note-btn").addEventListener("click",(()=>{Ee(Ce),Ne.push((()=>{const e=ke("div","note"),t=[ke("img","delete-note"),ke("textarea","note-title"),ke("textarea","note-text")];t[1].setAttribute("rows","1"),t[1].setAttribute("cols","16");const n=document.querySelector(".note-title-form").value;t[1].value=n,t[2].setAttribute("rows","10"),t[2].setAttribute("cols","20");const r=document.querySelector(".note-text-form").value;return t[2].innerText=r,t[0].setAttribute("src","./images/x.svg"),t[0].setAttribute("alt","delete-note"),Te(e,t),e})()),xe(Ce,Ne),"main-notes"!==Ce.classList[1]&&Ce.classList.toggle("main-notes"),Pe.style.display="none"}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,